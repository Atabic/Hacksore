name: Build/Deploy
on:
  workflow_dispatch:
  push:
    branches:
      - "**"
env:
  NODE_VERSION: "16"
  TURBO_REMOTE_ONLY: true
  NEXT_PUBLIC_FIREBASE_API_KEY: ${{ secrets.NEXT_PUBLIC_FIREBASE_API_KEY }}
  NEXT_PUBLIC_FIREBASE_DATABASE_URL: ${{ secrets.NEXT_PUBLIC_FIREBASE_DATABASE_URL }}
  NEXT_PUBLIC_FIREBASE_PROJECT_ID: ${{ secrets.NEXT_PUBLIC_FIREBASE_PROJECT_ID }}
  NEXT_PUBLIC_FIREBASE_APP_ID: ${{ secrets.NEXT_PUBLIC_FIREBASE_APP_ID }}
  TURBO_TOKEN: ${{ secrets.VERCEL_TOKEN }}
  TURBO_TEAM: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

jobs:
  build-web:
    name: Build Web
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: "${{ env.NODE_VERSION }}"
      - name: Cache node modules
        id: cache-npm
        uses: actions/cache@v3
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: Build
        run: |
          yarn global add vercel
          vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
          vercel build --token=${{ secrets.VERCEL_TOKEN }}
      - name: "Tar Directory"
        run: tar -zcf next.tgz .vercel
      - uses: actions/upload-artifact@v3
        with:
          name: web-build
          path: next.tgz
  deploy-web-beta:
    name: Deploy Web (Preview)
    runs-on: ubuntu-latest
    needs: build-web
    environment: Beta
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: web-build
          path: .
      - name: "Untar Directory"
        run: |
          ls -hal
          tar -zxf next.tgz
      - name: Deploy
        run: |
          yarn global add vercel
          vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }}
  build-web-prod:
    name: Build Web (Production)
    needs: [build-web]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: "${{ env.NODE_VERSION }}"
      - name: Cache node modules
        id: cache-npm
        uses: actions/cache@v3
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: Build
        run: |
          yarn global add vercel
          vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
          vercel build --token=${{ secrets.VERCEL_TOKEN }} --prod
      - name: "Tar Directory"
        run: tar -zcf next.tgz .vercel
      - uses: actions/upload-artifact@v3
        with:
          name: web-build-prod
          path: next.tgz
  deploy-web-prod:
    name: Deploy Web (Production)
    runs-on: ubuntu-latest
    needs: [build-web, build-web-prod, deploy-web-beta]
    environment: Production
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: web-build-prod
          path: .
      - name: "Untar Directory"
        run: |
          ls -hal
          tar -zxf next.tgz
      - name: Deploy
        run: |
          yarn global add vercel
          vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }} --prod
  build-bot:
    name: Build Bot
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: "${{ env.NODE_VERSION }}"
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}
      - name: Setup buildx
        uses: docker/setup-buildx-action@v2
        id: buildx
        with:
          install: true
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Build and push image
        id: docker_build
        uses: docker/build-push-action@v3
        with:
          platforms: linux/amd64
          push: true
          context: .
          build-args: "--progress=plain"
          network: host
          allow: network.host
          file: apps/bot/Dockerfile
          tags: "hacksore/presence-bot:latest"
      - name: Deploy
        uses: peter-evans/repository-dispatch@v2
        if: github.ref == 'refs/heads/master'
        with:
          event-type: deploy-bot-prod
  deploy-firebase:
    name: Deploy Firebase
    runs-on: ubuntu-latest
    needs: build-bot
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: "${{ env.NODE_VERSION }}"
      - name: Create google service account file and env var
        run: |
          # decode the token into json and write to file, using base64 to not have to mess with the json format
          echo "Creating file in $HOME/firebase.json"
          echo "${{ secrets.FIREBASE_SA_BASE64 }}" | base64 --decode > "$HOME/firebase.json"

          # source the env with the path to the file
          echo "Sourcing env GOOGLE_APPLICATION_CREDENTIALS=$HOME/firebase.json"
          echo "GOOGLE_APPLICATION_CREDENTIALS=$HOME/firebase.json" >> $GITHUB_ENV
      - name: Install firebase-tools
        run: yarn global add firebase-tools
      - name: Deploy rules
        run: firebase deploy --non-interactive
  deploy-bot:
    name: Deploy Bot
    runs-on: ubuntu-latest
    needs: [build-bot, deploy-firebase]
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: "${{ env.NODE_VERSION }}"
      - name: SSH and Deploy Container
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.BOT_HOST_IP }}
          username: ${{ secrets.BOT_HOST_USERNAME }}
          password: ${{ secrets.BOT_HOST_PASSWORD}}
          port: 22
          script: |
            # pull the latest image
            docker pull hacksore/presence-bot:latest

            # stop the running instance gracefully
            docker stop presence

            # clean up
            docker rm presence

            # run a new one
            docker run \
              --restart always \
              --detach \
              --name presence \
              --env-file=.env \
              hacksore/presence-bot:latest
